<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.CodeMethodMapper">
  <resultMap id="BaseResultMap" type="po.CodeMethod">
    <result column="code_method_id" jdbcType="INTEGER" property="codeMethodId" />
    <result column="code_class_id" jdbcType="INTEGER" property="codeClassId" />
    <result column="method_signuature" jdbcType="VARCHAR" property="methodSignuature" />
    <result column="method_name" jdbcType="VARCHAR" property="methodName" />
    <result column="access" jdbcType="VARCHAR" property="access" />
    <result column="is_static" jdbcType="INTEGER" property="isStatic" />
    <result column="return_type" jdbcType="VARCHAR" property="returnType" />
    <result column="type_value" jdbcType="VARCHAR" property="typeValue" />
    <result column="inner_class" jdbcType="INTEGER" property="innerClass" />
    <result column="api" jdbcType="INTEGER" property="api" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="po.CodeMethod">
    <result column="method_content" jdbcType="LONGVARCHAR" property="methodContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    code_method_id, code_class_id, method_signuature, method_name, access, is_static, 
    return_type, type_value, inner_class, api
  </sql>
  <sql id="Blob_Column_List">
    method_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="po.CodeMethodExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from code_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="po.CodeMethodExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from code_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="po.CodeMethodExample">
    delete from code_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="po.CodeMethod">
    insert into code_method (code_method_id, code_class_id, method_signuature, 
      method_name, access, is_static, 
      return_type, type_value, inner_class, 
      api, method_content)
    values (#{codeMethodId,jdbcType=INTEGER}, #{codeClassId,jdbcType=INTEGER}, #{methodSignuature,jdbcType=VARCHAR}, 
      #{methodName,jdbcType=VARCHAR}, #{access,jdbcType=VARCHAR}, #{isStatic,jdbcType=INTEGER}, 
      #{returnType,jdbcType=VARCHAR}, #{typeValue,jdbcType=VARCHAR}, #{innerClass,jdbcType=INTEGER}, 
      #{api,jdbcType=INTEGER}, #{methodContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="po.CodeMethod">
    insert into code_method
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="codeMethodId != null">
        code_method_id,
      </if>
      <if test="codeClassId != null">
        code_class_id,
      </if>
      <if test="methodSignuature != null">
        method_signuature,
      </if>
      <if test="methodName != null">
        method_name,
      </if>
      <if test="access != null">
        access,
      </if>
      <if test="isStatic != null">
        is_static,
      </if>
      <if test="returnType != null">
        return_type,
      </if>
      <if test="typeValue != null">
        type_value,
      </if>
      <if test="innerClass != null">
        inner_class,
      </if>
      <if test="api != null">
        api,
      </if>
      <if test="methodContent != null">
        method_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="codeMethodId != null">
        #{codeMethodId,jdbcType=INTEGER},
      </if>
      <if test="codeClassId != null">
        #{codeClassId,jdbcType=INTEGER},
      </if>
      <if test="methodSignuature != null">
        #{methodSignuature,jdbcType=VARCHAR},
      </if>
      <if test="methodName != null">
        #{methodName,jdbcType=VARCHAR},
      </if>
      <if test="access != null">
        #{access,jdbcType=VARCHAR},
      </if>
      <if test="isStatic != null">
        #{isStatic,jdbcType=INTEGER},
      </if>
      <if test="returnType != null">
        #{returnType,jdbcType=VARCHAR},
      </if>
      <if test="typeValue != null">
        #{typeValue,jdbcType=VARCHAR},
      </if>
      <if test="innerClass != null">
        #{innerClass,jdbcType=INTEGER},
      </if>
      <if test="api != null">
        #{api,jdbcType=INTEGER},
      </if>
      <if test="methodContent != null">
        #{methodContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="po.CodeMethodExample" resultType="java.lang.Long">
    select count(*) from code_method
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update code_method
    <set>
      <if test="record.codeMethodId != null">
        code_method_id = #{record.codeMethodId,jdbcType=INTEGER},
      </if>
      <if test="record.codeClassId != null">
        code_class_id = #{record.codeClassId,jdbcType=INTEGER},
      </if>
      <if test="record.methodSignuature != null">
        method_signuature = #{record.methodSignuature,jdbcType=VARCHAR},
      </if>
      <if test="record.methodName != null">
        method_name = #{record.methodName,jdbcType=VARCHAR},
      </if>
      <if test="record.access != null">
        access = #{record.access,jdbcType=VARCHAR},
      </if>
      <if test="record.isStatic != null">
        is_static = #{record.isStatic,jdbcType=INTEGER},
      </if>
      <if test="record.returnType != null">
        return_type = #{record.returnType,jdbcType=VARCHAR},
      </if>
      <if test="record.typeValue != null">
        type_value = #{record.typeValue,jdbcType=VARCHAR},
      </if>
      <if test="record.innerClass != null">
        inner_class = #{record.innerClass,jdbcType=INTEGER},
      </if>
      <if test="record.api != null">
        api = #{record.api,jdbcType=INTEGER},
      </if>
      <if test="record.methodContent != null">
        method_content = #{record.methodContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update code_method
    set code_method_id = #{record.codeMethodId,jdbcType=INTEGER},
      code_class_id = #{record.codeClassId,jdbcType=INTEGER},
      method_signuature = #{record.methodSignuature,jdbcType=VARCHAR},
      method_name = #{record.methodName,jdbcType=VARCHAR},
      access = #{record.access,jdbcType=VARCHAR},
      is_static = #{record.isStatic,jdbcType=INTEGER},
      return_type = #{record.returnType,jdbcType=VARCHAR},
      type_value = #{record.typeValue,jdbcType=VARCHAR},
      inner_class = #{record.innerClass,jdbcType=INTEGER},
      api = #{record.api,jdbcType=INTEGER},
      method_content = #{record.methodContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update code_method
    set code_method_id = #{record.codeMethodId,jdbcType=INTEGER},
      code_class_id = #{record.codeClassId,jdbcType=INTEGER},
      method_signuature = #{record.methodSignuature,jdbcType=VARCHAR},
      method_name = #{record.methodName,jdbcType=VARCHAR},
      access = #{record.access,jdbcType=VARCHAR},
      is_static = #{record.isStatic,jdbcType=INTEGER},
      return_type = #{record.returnType,jdbcType=VARCHAR},
      type_value = #{record.typeValue,jdbcType=VARCHAR},
      inner_class = #{record.innerClass,jdbcType=INTEGER},
      api = #{record.api,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>